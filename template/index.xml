<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Template-rsses on Remco Docs</title>
    <link>https://heavyhorst.github.io/remco/template/index.xml</link>
    <description>Recent content in Template-rsses on Remco Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sat, 03 Dec 2016 15:02:45 +0100</lastBuildDate>
    <atom:link href="https://heavyhorst.github.io/remco/template/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Template</title>
      <link>https://heavyhorst.github.io/remco/template/</link>
      <pubDate>Sat, 03 Dec 2016 15:02:45 +0100</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/template/</guid>
      <description>

&lt;h3 id=&#34;chapter-3&#34;&gt;Chapter 3&lt;/h3&gt;

&lt;h1 id=&#34;templates&#34;&gt;Templates&lt;/h1&gt;

&lt;p&gt;Templates are written in flosch&amp;rsquo;s &lt;a href=&#34;https://github.com/flosch/pongo2&#34;&gt;&lt;code&gt;pongo2&lt;/code&gt;&lt;/a&gt; template engine.&lt;/p&gt;

&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;For a documentation on how the templating language works you can &lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/templates/&#34;&gt;head over to the Django documentation&lt;/a&gt;. pongo2 aims to be compatible with it.&lt;/p&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>template functions</title>
      <link>https://heavyhorst.github.io/remco/template/template-functions/</link>
      <pubDate>Sat, 03 Dec 2016 15:06:33 +0100</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/template/template-functions/</guid>
      <description>

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;exists&lt;/strong&gt; &amp;ndash; Checks if the key exists. Return false if key is not found.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if exists(&amp;quot;/key&amp;quot;) %}
    value: {{ getv (&amp;quot;/key&amp;quot;) }}
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;get&lt;/strong&gt; &amp;ndash; Returns the KVPair where key matches its argument.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% with get(&amp;quot;/key&amp;quot;) as dat %}
    key: {{dat.Key}}
    value: {{dat.Value}}
{% endwith %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;gets&lt;/strong&gt; &amp;ndash; Returns all KVPair, []KVPair, where key matches its argument.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for i in gets(&amp;quot;/*&amp;quot;) %}
    key: {{i.Key}}
    value: {{i.Value}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;getv&lt;/strong&gt; &amp;ndash; Returns the value as a string where key matches its argument or an optional default value.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;value: {{ getv(&amp;quot;/key&amp;quot;) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;with-a-default-value&#34;&gt;With a default value&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;value: {{ getv(&amp;quot;/key&amp;quot;, &amp;quot;default_value&amp;quot;) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;getvs&lt;/strong&gt; &amp;ndash; Returns all values, []string, where key matches its argument.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for value in getvs(&amp;quot;/*&amp;quot;) %}
    value: {{value}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;getenv&lt;/strong&gt; &amp;ndash; Retrieves the value of the environment variable named by the key. It returns the value, which will be empty if the variable is not present. Optionally, you can give a default value that will be returned if the key is not present. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HOSTNAME=`hostname`
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;hostname: {{getenv(&amp;quot;HOSTNAME&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;with-a-default-value-1&#34;&gt;With a default value&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;ipaddr: {{ getenv(&amp;quot;HOST_IP&amp;quot;, &amp;quot;127.0.0.1&amp;quot;) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;ls&lt;/strong&gt; &amp;ndash; Returns all subkeys, []string, where path matches its argument. Returns an empty list if path is not found. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for i in ls(&amp;quot;/deis/services&amp;quot;) %}
   value: {{i}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;lsdir&lt;/strong&gt; &amp;ndash; Returns all subkeys, []string, where path matches its argument. It only returns subkeys that also have subkeys. Returns an empty list if path is not found. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for dir in lsdir(&amp;quot;/deis/services&amp;quot;) %}
   value: {{dir}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;replace&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/strings/#Replace&#34;&gt;strings.Replace&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;backend = {{ replace(getv(&amp;quot;/services/backend/nginx&amp;quot;), &amp;quot;-&amp;quot;, &amp;quot;_&amp;quot;, -1) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;contains&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/strings/#Contains&#34;&gt;strings.Contains&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if contains(getv(&amp;quot;/services/backend/nginx&amp;quot;), &amp;quot;something&amp;quot;) %}
something
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;printf&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/fmt/#Sprintf&#34;&gt;fmt.Sprintf&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ getv (printf (&amp;quot;/config/%s/host_port&amp;quot;, dir)) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;unixTS&lt;/strong&gt; &amp;ndash; Wrapper for &lt;a href=&#34;https://golang.org/pkg/time/#Unix&#34;&gt;time.Now().Unix()&lt;/a&gt;. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ unixTS }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;dateRFC3339&lt;/strong&gt; &amp;ndash; Wrapper for &lt;a href=&#34;https://golang.org/pkg/time/&#34;&gt;time.Now().Format(time.RFC3339)&lt;/a&gt;. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ dateRFC3339 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;lookupIP&lt;/strong&gt; &amp;ndash; Wrapper for the &lt;a href=&#34;https://golang.org/pkg/net/#LookupIP&#34;&gt;net.LookupIP&lt;/a&gt; function. The wrapper returns the IP addresses in alphabetical order. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for ip in lookupIP(&amp;quot;kube-master&amp;quot;) %}
 {{ ip }}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;lookupSRV&lt;/strong&gt; &amp;ndash; Wrapper for the &lt;a href=&#34;https://golang.org/pkg/net/#LookupSRV&#34;&gt;net.LookupSRV&lt;/a&gt; function. The wrapper returns the SRV records in alphabetical order. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for srv in lookupSRV(&amp;quot;xmpp-server&amp;quot;, &amp;quot;tcp&amp;quot;, &amp;quot;google.com&amp;quot;) %}
  target: {{ srv.Target }}
  port: {{ srv.Port }}
  priority: {{ srv.Priority }}
  weight: {{ srv.Weight }}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;createMap&lt;/strong&gt; &amp;ndash; create a hashMap to store values at runtime. This can be useful if you want to generate json/yaml files. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% set map = createMap() %}
{{ map.Set(&amp;quot;Moin&amp;quot;, &amp;quot;Hallo2&amp;quot;) }}
{{ map.Set(&amp;quot;Test&amp;quot;, 105) }}
{{ map | toYAML }}

{% set map2 = createMap() %}
{{ map2.Set(&amp;quot;Moin&amp;quot;, &amp;quot;Hallo&amp;quot;) }}
{{ map2.Set(&amp;quot;Test&amp;quot;, 300) }}
{{ map2.Set(&amp;quot;anotherMap&amp;quot;, map) }}
{{ map2 | toYAML }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The hashmap supports the following methods:
* &lt;code&gt;m.Set(&amp;quot;key&amp;quot;, value)&lt;/code&gt; adds a new value of arbitrary type referenced by &amp;ldquo;key&amp;rdquo; to the map
* &lt;code&gt;m.Get(&amp;quot;key&amp;quot;)&lt;/code&gt; get the value for the given &amp;ldquo;key&amp;rdquo;
* &lt;code&gt;m.Remove(&amp;quot;key&amp;quot;)&lt;/code&gt; removes the key and value from the map
&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;createSet&lt;/strong&gt; &amp;ndash; create a Set to store values at runtime. This can be useful if you want to generate json/yaml files. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% set s = createSet() %}
{{ s.Append(&amp;quot;Moin&amp;quot;) }}
{{ s.Append(&amp;quot;Moin&amp;quot;) }}
{{ s.Append(&amp;quot;Hallo&amp;quot;) }}
{{ s.Append(1) }}
{{ s.Remove(&amp;quot;Hallo&amp;quot;) }}
{{ s | toYAML }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The set created supports the following methods:
* &lt;code&gt;s.Append(&amp;quot;string&amp;quot;)&lt;/code&gt; adds a new string to the set. Attention - the set is not
  sorted or the order of appended elements guaranteed.
* &lt;code&gt;s.Remove(&amp;quot;string&amp;quot;)&lt;/code&gt; removes the given element from the set.
* &lt;code&gt;s.Contains(&amp;quot;string&amp;quot;)&lt;/code&gt; check if the given string is part of the set, returns
  true or false otherwise
* &lt;code&gt;s.SortedSet()&lt;/code&gt; return a new list where all elements are sorted in increasing
  order. This method should be used inside the template with a for-in loop to generate
 a stable output file not changing order of elements on every run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% set s = createSet() %}
{% s.Append(&amp;quot;Moin&amp;quot;) %}
{% s.Append(&amp;quot;Hi&amp;quot;) %}
{% s.Append(&amp;quot;Hallo&amp;quot;) %}

{% for greeting in s %}
{{ geeting }}
{% endfor %}

{% for greeting in s.SortedSet() %}
{{ geeting }}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of the first loop is not defined, it can be in every order (like &lt;code&gt;Moin Hallo Hi&lt;/code&gt; or &lt;code&gt;Hi Hallo Moin&lt;/code&gt; and so on)
The second loop returns every time &lt;code&gt;Hallo Hi Moin&lt;/code&gt; (items sorted as string in increasing order)
&lt;/details&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>template filters</title>
      <link>https://heavyhorst.github.io/remco/template/template-filters/</link>
      <pubDate>Sat, 03 Dec 2016 15:07:41 +0100</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/template/template-filters/</guid>
      <description>

&lt;h2 id=&#34;builtin-filters&#34;&gt;Builtin filters&lt;/h2&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;parseInt&lt;/strong&gt; &amp;ndash; Takes the given string and parses it as a base-10 integer (64bit) &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;12000&amp;quot; | parseInt }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;parseFloat&lt;/strong&gt; &amp;ndash; Takes the given string and parses it as a float64 &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;12000.45&amp;quot; | parseFloat }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;base64&lt;/strong&gt; &amp;ndash; Encodes a string as base64 &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;somestring&amp;quot; | base64}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;base&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/path/#Base&#34;&gt;path.Base&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;/home/user/test&amp;quot; | base }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;dir&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/path/#Dir&#34;&gt;path.Dir&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;/home/user/test&amp;quot; | dir }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;split&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/strings/#Split&#34;&gt;strings.Split&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for i in (&amp;quot;/home/user/test&amp;quot; | split:&amp;quot;/&amp;quot;) %}
{{i}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;mapValue&lt;/strong&gt; &amp;ndash; Returns an map element by key  &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ getv(&amp;quot;/some_yaml_config&amp;quot;) | parseYAML | mapValue:&amp;quot;key&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;index&lt;/strong&gt; &amp;ndash; Returns an array element by index  &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;/home/user/test&amp;quot; | split:&amp;quot;/&amp;quot; | index:&amp;quot;1&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;parseYAML&lt;/strong&gt; &amp;ndash; Returns an interface{} of the yaml value.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for value in getvs(&amp;quot;/cache1/domains/*&amp;quot;) %}
{% set data = value | parseYAML %}
{{ data.type }} {{ data.name }} {{ data.addr }}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;parseJSON&lt;/strong&gt; &amp;ndash; Returns an interface{} of the json value.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for value in getvs(&amp;quot;/cache1/domains/*&amp;quot;) %}
{% set data = value | parseJSON %}
{{ data.type }} {{ data.name }} {{ data.addr }}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;toJSON&lt;/strong&gt; &amp;ndash; Converts data, for example the result of gets or lsdir, into an JSON object. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ gets(&amp;quot;/myapp/database/*&amp;quot;) | toJson}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;toPrettyJSON&lt;/strong&gt; &amp;ndash; Converts data, for example the result of gets or lsdir, into an pretty-printed JSON object, indented by four spaces. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ gets(&amp;quot;/myapp/database/*&amp;quot;) | toPrettyJson}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;toYAML&lt;/strong&gt; &amp;ndash; Converts data, for example the result of gets or lsdir, into a YAML string. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ gets(&amp;quot;/myapp/database/*&amp;quot;) | toYAML}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;sortByLength&lt;/strong&gt; - Returns the sorted array. &lt;/summary&gt;&lt;/p&gt;

&lt;p&gt;Works with []string and []KVPair.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for dir in lsdir(&amp;quot;/config&amp;quot;) | sortByLength %}
{{dir}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;h2 id=&#34;custom-filters&#34;&gt;Custom filters&lt;/h2&gt;

&lt;p&gt;It is possible to create custom filters in JavaScript.
If you want to create a &amp;lsquo;toEnv&amp;rsquo; filter, which transforms file system paths to environment variables, you must create the file &amp;lsquo;toEnv.js&amp;rsquo; in the configurable filter directory.&lt;/p&gt;

&lt;p&gt;The filter code could look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;In.split(&amp;quot;/&amp;quot;).join(&amp;quot;_&amp;quot;).substr(1).toUpperCase();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two predefined variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In: the filter input (string)&lt;/li&gt;
&lt;li&gt;Param: the optional filter parameter (string)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the parameter one string is possible only, the parameter string is added with a double-colon to the filter name (&amp;ldquo;&amp;ldquo;yadda&amp;rdquo; | filter:&amp;ldquo;paramstr&amp;rdquo;).
When the filter function needs multiple parameter all of them must be put into this one string and parsed inside the filter to extract all
parameter from this string (example &amp;ldquo;replace&amp;rdquo; filter below).&lt;/p&gt;

&lt;p&gt;Remark:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;console&amp;rdquo; object for logging does not exist, therefore no output (for debugging and similar) possible.&lt;/li&gt;
&lt;li&gt;variable declaration must use &amp;ldquo;var&amp;rdquo; as other keywords like &amp;ldquo;const&amp;rdquo; or &amp;ldquo;let&amp;rdquo; are not defined&lt;/li&gt;
&lt;li&gt;the main script must not use &amp;ldquo;return&amp;rdquo; keyword, last output is the filter result.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;reverse filter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Put file &lt;code&gt;reverse.js&lt;/code&gt; into the configured &amp;ldquo;filter_dir&amp;rdquo; with following content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function reverse(s) {
     var o = &amp;quot;&amp;quot;;
     for (var i = s.length - 1; i &amp;gt;= 0; i--)
        o += s[i];
     return o;
}

reverse(In);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Call this filter inside your template (e,g, &amp;ldquo;my-reverse-template.tmpl&amp;rdquo;) with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% set myString = &amp;quot;hip-hip-hooray&amp;quot; %}
myString is {{ myString }}
reversed myString is {{ myString | reverse }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;myString is hip-hip-hooray
reversed myString is yarooh-pih-pih
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;replace filter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Put file &lt;code&gt;replace.js&lt;/code&gt; into the configured &amp;ldquo;filter_dir&amp;rdquo; with following content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function replace(str, p) {
    var params = [&#39; &#39;,&#39;_&#39;];  // default: replace all spaces with underscore
    if (p) {
        params = p.split(&#39;,&#39;);  // split all params given at comma
    }
  // if third param is a &amp;quot;g&amp;quot; like &amp;quot;global&amp;quot; change search string to regexp
    if (params.length &amp;gt; 2 &amp;amp;&amp;amp; params[2] == &#39;g&#39;) {
        params[0] = new RegExp(params[0], params[2]);
    }
    // javascript string.replace replaces first occurence only if search param is a string
    // need regexp object to replace all occurences
    return str.replace(params[0], params[1]);
}
replace(In, Param)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use this inside the template as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% set myString = &amp;quot;hip-hip-hooray&amp;quot; %}
myString is {{ myString }}
replace with default params (spaces): {{ myString | replace }}
only replace first &amp;quot;-&amp;quot; with underscore is {{ myString | replace:&amp;quot;-,_&amp;quot; }}
replace all &amp;quot;-&amp;quot; with underscore is {{ myString | replace:&amp;quot;-,_,g&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;myString is hip-hip-hooray
replace with default params (spaces): hip-hip-hooray
only replace first &amp;quot;-&amp;quot; with underscore is hip_hip-hooray
replace all &amp;quot;-&amp;quot; with underscore is hip_hip_hooray
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>